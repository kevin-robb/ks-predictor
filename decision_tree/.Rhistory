df = cbind(df, title_caps_ratio)
# remove the title column
df = subset(df, select = -c(name) )
head(df)
# create lists to store results
currency_is_usd <- numeric(length(df$currency))
country_is_us <- numeric(length(df$country))
# assign the lists' values (they init to 0, so don't need to set negative case)
currency_is_usd[grepl("USD",df$currency)] <- 1
country_is_us[grepl("US",df$country)] <- 1
# add the new columns to the dataframe
df = cbind(df, currency_is_usd)
df = cbind(df, country_is_us)
# remove the currency column
df = subset(df, select = -c(currency, country) )
head(df)
# create lists to store results
launched_epoch <- as.integer(as.POSIXct(df$launched))
open_epoch <- as.integer(as.POSIXct(df$deadline)) - launched_epoch
# add the new columns to the dataframe
df = cbind(df, launched_epoch)
df = cbind(df, open_epoch)
# remove the currency column
df = subset(df, select = -c(launched, deadline) )
head(df)
df = subset(df, select = -c(category, main_category) )
head(df)
# create list to store target
target <- numeric(length(df$state))
# fill the list from our labels
target[grepl("successful",df$state)] <- 1
target[grepl("failed",df$state)] <- 0
# add the target column to the end of the dataframe
df = cbind(df, target)
# remove the old state column
df = subset(df, select = -c(state) )
head(df)
# list rows of data that have missing values
#df[!complete.cases(df),]
# reassign df to only keep full rows
df <- df[complete.cases(df),]
# print the total number of rows in the full df
length(df$target)
# find the index of df that splits the first 20% from the latter 80%
ind = floor(0.2 * length(df$target))
df_test <- df[1:ind,]
# set the remaining dataframe to the complement of df_test to make sure there is no crossover
df_rem <- df[-c(1:ind),]
# let's check the lengths to make sure it worked
length(df_test$target)
#length(df_rem$target)
# find the index of df that splits the first 75% from the latter 25%
ind = floor(0.75 * length(df_rem$target))
df_train <- df_rem[1:ind,]
df_validate <- df_rem[-c(1:ind),]
# check the lengths to make sure it worked
length(df_train$target)
length(df_validate$target)
knitr::opts_chunk$set(echo = TRUE)
# working with segmented dataset for faser testing
write.csv(df_test,"data/ks_test_seg.csv")
write.csv(df_train,"data/ks_train_seg.csv")
write.csv(df_validate,"data/ks_validate_seg.csv")
# working with full real dataset
# write.csv(df_test,"data/ks_test.csv")
# write.csv(df_train,"data/ks_train.csv")
# write.csv(df_validate,"data/ks_validate.csv")
knitr::opts_chunk$set(echo = TRUE)
df_orig = read.csv("data/ks_orig.csv")
#head(df_orig)
names(df_orig)
#df = df_orig[c(1:100),]
df = df_orig[c(1:5000),] # segmented dataset
#df = df_orig # use this line to run on the full dataset
head(df)
df <- df[(grepl("successful",df$state) | grepl("failed",df$state)),]
head(df)
length(df$state)
df <- df[,-c(1,9,11,13,14)]
head(df)
# create list "title_length" to store length
title_length <- numeric(length(df$name))
# create list "title_punc" to store the number of punctuation marks in the title
title_punc <- numeric(length(df$name))
# define characters that count as punctuation
punc <- c('.', ',', '!', '?', '&', '$', '#', '@', '*', '^', '<', '>', '/', '\"', '\'', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\', ';', ':', '%')
# create list "title_caps_ratio" to store ratio of UPPERCASE to total length
title_caps_ratio <- numeric(length(df$name))
# define characters that count as uppercase (had problem with toupper(" "))
caps = c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')
# iterate through the name strings to create title_length
for (row in 1:nrow(df)) {
# grab the title length
title_length[row] <- nchar(df[row,"name"])
# iterate through characters and count punctuation & caps
num_punc <- 0
num_caps <- 0
title_arr <- strsplit(df[row,"name"], "")[[1]]
for (c in title_arr) {
if (c %in% punc) {
num_punc <- num_punc + 1
}
if (c %in% caps) {
num_caps <- num_caps + 1
}
}
title_punc[row] <- num_punc
title_caps_ratio[row] <- num_caps / (title_length[row] - num_punc)
}
# add the new columns to the dataframe
df = cbind(df, title_length)
df = cbind(df, title_punc)
df = cbind(df, title_caps_ratio)
# remove the title column
df = subset(df, select = -c(name) )
head(df)
# create lists to store results
currency_is_usd <- numeric(length(df$currency))
country_is_us <- numeric(length(df$country))
# assign the lists' values (they init to 0, so don't need to set negative case)
currency_is_usd[grepl("USD",df$currency)] <- 1
country_is_us[grepl("US",df$country)] <- 1
# add the new columns to the dataframe
df = cbind(df, currency_is_usd)
df = cbind(df, country_is_us)
# remove the currency column
df = subset(df, select = -c(currency, country) )
head(df)
# create lists to store results
launched_epoch <- as.integer(as.POSIXct(df$launched))
open_epoch <- as.integer(as.POSIXct(df$deadline)) - launched_epoch
# add the new columns to the dataframe
df = cbind(df, launched_epoch)
df = cbind(df, open_epoch)
# remove the currency column
df = subset(df, select = -c(launched, deadline) )
head(df)
df_cats = data.frame()
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in range(1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(cats, cat)
}
df_cats = data.frame()
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in range(1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in range(1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df = cbind(df, cat)
}
head(df_cats)
head(df)
knitr::opts_chunk$set(echo = TRUE)
df_orig = read.csv("data/ks_orig.csv")
#head(df_orig)
names(df_orig)
#df = df_orig[c(1:100),]
df = df_orig[c(1:5000),] # segmented dataset
#df = df_orig # use this line to run on the full dataset
head(df)
df <- df[(grepl("successful",df$state) | grepl("failed",df$state)),]
head(df)
length(df$state)
df <- df[,-c(1,9,11,13,14)]
head(df)
# create list "title_length" to store length
title_length <- numeric(length(df$name))
# create list "title_punc" to store the number of punctuation marks in the title
title_punc <- numeric(length(df$name))
# define characters that count as punctuation
punc <- c('.', ',', '!', '?', '&', '$', '#', '@', '*', '^', '<', '>', '/', '\"', '\'', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\', ';', ':', '%')
# create list "title_caps_ratio" to store ratio of UPPERCASE to total length
title_caps_ratio <- numeric(length(df$name))
# define characters that count as uppercase (had problem with toupper(" "))
caps = c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')
# iterate through the name strings to create title_length
for (row in 1:nrow(df)) {
# grab the title length
title_length[row] <- nchar(df[row,"name"])
# iterate through characters and count punctuation & caps
num_punc <- 0
num_caps <- 0
title_arr <- strsplit(df[row,"name"], "")[[1]]
for (c in title_arr) {
if (c %in% punc) {
num_punc <- num_punc + 1
}
if (c %in% caps) {
num_caps <- num_caps + 1
}
}
title_punc[row] <- num_punc
title_caps_ratio[row] <- num_caps / (title_length[row] - num_punc)
}
# add the new columns to the dataframe
df = cbind(df, title_length)
df = cbind(df, title_punc)
df = cbind(df, title_caps_ratio)
# remove the title column
df = subset(df, select = -c(name) )
head(df)
# create lists to store results
currency_is_usd <- numeric(length(df$currency))
country_is_us <- numeric(length(df$country))
# assign the lists' values (they init to 0, so don't need to set negative case)
currency_is_usd[grepl("USD",df$currency)] <- 1
country_is_us[grepl("US",df$country)] <- 1
# add the new columns to the dataframe
df = cbind(df, currency_is_usd)
df = cbind(df, country_is_us)
# remove the currency column
df = subset(df, select = -c(currency, country) )
head(df)
# create lists to store results
launched_epoch <- as.integer(as.POSIXct(df$launched))
open_epoch <- as.integer(as.POSIXct(df$deadline)) - launched_epoch
# add the new columns to the dataframe
df = cbind(df, launched_epoch)
df = cbind(df, open_epoch)
# remove the currency column
df = subset(df, select = -c(launched, deadline) )
head(df)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in c(1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
head(df_cats)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
head(df_cats)
knitr::opts_chunk$set(echo = TRUE)
df_orig = read.csv("data/ks_orig.csv")
#head(df_orig)
names(df_orig)
#df = df_orig[c(1:100),]
df = df_orig[c(1:5000),] # segmented dataset
#df = df_orig # use this line to run on the full dataset
head(df)
df <- df[(grepl("successful",df$state) | grepl("failed",df$state)),]
head(df)
length(df$state)
df <- df[,-c(1,9,11,13,14)]
head(df)
# create list "title_length" to store length
title_length <- numeric(length(df$name))
# create list "title_punc" to store the number of punctuation marks in the title
title_punc <- numeric(length(df$name))
# define characters that count as punctuation
punc <- c('.', ',', '!', '?', '&', '$', '#', '@', '*', '^', '<', '>', '/', '\"', '\'', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\', ';', ':', '%')
# create list "title_caps_ratio" to store ratio of UPPERCASE to total length
title_caps_ratio <- numeric(length(df$name))
# define characters that count as uppercase (had problem with toupper(" "))
caps = c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')
# iterate through the name strings to create title_length
for (row in 1:nrow(df)) {
# grab the title length
title_length[row] <- nchar(df[row,"name"])
# iterate through characters and count punctuation & caps
num_punc <- 0
num_caps <- 0
title_arr <- strsplit(df[row,"name"], "")[[1]]
for (c in title_arr) {
if (c %in% punc) {
num_punc <- num_punc + 1
}
if (c %in% caps) {
num_caps <- num_caps + 1
}
}
title_punc[row] <- num_punc
title_caps_ratio[row] <- num_caps / (title_length[row] - num_punc)
}
# add the new columns to the dataframe
df = cbind(df, title_length)
df = cbind(df, title_punc)
df = cbind(df, title_caps_ratio)
# remove the title column
df = subset(df, select = -c(name) )
head(df)
# create lists to store results
currency_is_usd <- numeric(length(df$currency))
country_is_us <- numeric(length(df$country))
# assign the lists' values (they init to 0, so don't need to set negative case)
currency_is_usd[grepl("USD",df$currency)] <- 1
country_is_us[grepl("US",df$country)] <- 1
# add the new columns to the dataframe
df = cbind(df, currency_is_usd)
df = cbind(df, country_is_us)
# remove the currency column
df = subset(df, select = -c(currency, country) )
head(df)
# create lists to store results
launched_epoch <- as.integer(as.POSIXct(df$launched))
open_epoch <- as.integer(as.POSIXct(df$deadline)) - launched_epoch
# add the new columns to the dataframe
df = cbind(df, launched_epoch)
df = cbind(df, open_epoch)
# remove the currency column
df = subset(df, select = -c(launched, deadline) )
head(df)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
names(cat) <- categories[i]
df_cats = cbind(df_cats, cat)
}
head(df_cats)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
names(df_cats) <- names(df) + categories[i]
}
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
names(df_cats) <- names(df) + c(categories[i])
}
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
names(df_cats) <- c(names(df), categories[i])
}
head(df_cats)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
names(df_cats) <- c(names(df), categories)
head(df_cats)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
names(df_cats) <- c(names(df), categories)
#head(df_cats)
# remove the original categories
df <- df_cats
df = subset(df, select = -c(category, main_category) )
head(df)
knitr::opts_chunk$set(echo = TRUE)
df_orig = read.csv("data/ks_orig.csv")
#head(df_orig)
names(df_orig)
#df = df_orig[c(1:100),]
df = df_orig[c(1:5000),] # segmented dataset
#df = df_orig # use this line to run on the full dataset
head(df)
df <- df[(grepl("successful",df$state) | grepl("failed",df$state)),]
head(df)
length(df$state)
df <- df[,-c(1,9,11,13,14)]
head(df)
# create list "title_length" to store length
title_length <- numeric(length(df$name))
# create list "title_punc" to store the number of punctuation marks in the title
title_punc <- numeric(length(df$name))
# define characters that count as punctuation
punc <- c('.', ',', '!', '?', '&', '$', '#', '@', '*', '^', '<', '>', '/', '\"', '\'', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', '\\', ';', ':', '%')
# create list "title_caps_ratio" to store ratio of UPPERCASE to total length
title_caps_ratio <- numeric(length(df$name))
# define characters that count as uppercase (had problem with toupper(" "))
caps = c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')
# iterate through the name strings to create title_length
for (row in 1:nrow(df)) {
# grab the title length
title_length[row] <- nchar(df[row,"name"])
# iterate through characters and count punctuation & caps
num_punc <- 0
num_caps <- 0
title_arr <- strsplit(df[row,"name"], "")[[1]]
for (c in title_arr) {
if (c %in% punc) {
num_punc <- num_punc + 1
}
if (c %in% caps) {
num_caps <- num_caps + 1
}
}
title_punc[row] <- num_punc
title_caps_ratio[row] <- num_caps / (title_length[row] - num_punc)
}
# add the new columns to the dataframe
df = cbind(df, title_length)
df = cbind(df, title_punc)
df = cbind(df, title_caps_ratio)
# remove the title column
df = subset(df, select = -c(name) )
head(df)
# create lists to store results
currency_is_usd <- numeric(length(df$currency))
country_is_us <- numeric(length(df$country))
# assign the lists' values (they init to 0, so don't need to set negative case)
currency_is_usd[grepl("USD",df$currency)] <- 1
country_is_us[grepl("US",df$country)] <- 1
# add the new columns to the dataframe
df = cbind(df, currency_is_usd)
df = cbind(df, country_is_us)
# remove the currency column
df = subset(df, select = -c(currency, country) )
head(df)
# create lists to store results
launched_epoch <- as.integer(as.POSIXct(df$launched))
open_epoch <- as.integer(as.POSIXct(df$deadline)) - launched_epoch
# add the new columns to the dataframe
df = cbind(df, launched_epoch)
df = cbind(df, open_epoch)
# remove the currency column
df = subset(df, select = -c(launched, deadline) )
head(df)
df_cats <- df
categories = c("Art","Comics","Crafts","Dance","Design","Fashion","Film & Video","Food","Games","Journalism","Music","Photography","Publishing","Technology","Theater")
# Art, Comics, Crafts, Dance, Design, Fashion, Film & Video, Food, Games, Journalism, Music, Photography, Publishing, Technology, and Theater.
for (i in (1:15)) {
cat <- numeric(length(df$main_category))
cat[grepl(categories[i],df$main_category)] <- 1
df_cats = cbind(df_cats, cat)
}
names(df_cats) <- c(names(df), categories)
#head(df_cats)
# remove the original categories
df <- df_cats
df = subset(df, select = -c(category, main_category) )
head(df)
# create list to store target
target <- numeric(length(df$state))
# fill the list from our labels
target[grepl("successful",df$state)] <- 1
target[grepl("failed",df$state)] <- 0
# add the target column to the end of the dataframe
df = cbind(df, target)
# remove the old state column
df = subset(df, select = -c(state) )
head(df)
# list rows of data that have missing values
#df[!complete.cases(df),]
# reassign df to only keep full rows
df <- df[complete.cases(df),]
# print the total number of rows in the full df
length(df$target)
# find the index of df that splits the first 20% from the latter 80%
ind = floor(0.2 * length(df$target))
df_test <- df[1:ind,]
# set the remaining dataframe to the complement of df_test to make sure there is no crossover
df_rem <- df[-c(1:ind),]
# let's check the lengths to make sure it worked
length(df_test$target)
#length(df_rem$target)
# find the index of df that splits the first 75% from the latter 25%
ind = floor(0.75 * length(df_rem$target))
df_train <- df_rem[1:ind,]
df_validate <- df_rem[-c(1:ind),]
# check the lengths to make sure it worked
length(df_train$target)
length(df_validate$target)
setwd("~/ks-predictor/decision-tree")
# format the filename to represent conditions
segmented = TRUE
with_cats = TRUE
suffix = ""
if (segmented) {
suffix = paste(suffix, "_seg", sep="")
}
if (with_cats) {
suffix = paste(suffix, "_cat", sep="")
}
# now output to file
write.csv(df_test, paste("data/ks_test", suffix, ".csv", sep=""))
write.csv(df_train, paste("data/ks_train", suffix, ".csv", sep=""))
write.csv(df_validate, paste("data/ks_validate", suffix, ".csv", sep=""))
